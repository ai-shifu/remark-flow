name: Publish Package and Create Release

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch upstream changes
        run: |
          git remote add upstream https://github.com/ai-shifu/remark-flow.git || true
          git fetch upstream
          git checkout upstream/main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run tests and validation
        run: |
          npm run lint
          npm run format:check
          npm run lint:md
          npm run test:coverage
          npm run build

      - name: Determine new version and generate changelog
        id: version
        run: |
          # Get the latest published version from npm
          LATEST_NPM_VERSION=$(npm view remark-flow version 2>/dev/null || echo "")
          
          if [ -z "$LATEST_NPM_VERSION" ]; then
            echo "No published version found on npm, creating first release"
            COMMIT_RANGE="HEAD"
            NEW_VERSION="1.0.0"
          else
            echo "Latest npm version: $LATEST_NPM_VERSION"
            
            # Find the git tag corresponding to the npm version
            NPM_TAG="v$LATEST_NPM_VERSION"
            if git rev-parse "$NPM_TAG" >/dev/null 2>&1; then
              echo "Found corresponding git tag: $NPM_TAG"
              COMMIT_RANGE="${NPM_TAG}..HEAD"
            else
              echo "No git tag found for npm version, using all commits"
              COMMIT_RANGE="HEAD"
            fi
            
            # Check for commits requiring version bump
            COMMITS=$(git log $COMMIT_RANGE --oneline --grep="^feat" --grep="^fix" --grep="BREAKING CHANGE" --perl-regexp | head -20)
            
            if [ -z "$COMMITS" ]; then
              echo "No conventional commits found since last release"
              echo "has_changes=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Determine version bump type
            if git log $COMMIT_RANGE --pretty=format:"%s" | grep -q "BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif git log $COMMIT_RANGE --pretty=format:"%s" | grep -q "^feat"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
            
            # Calculate new version
            IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_NPM_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case $BUMP_TYPE in
              major)
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              patch)
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Generate incremental changelog (only commits since last release)
          if [ "$COMMIT_RANGE" = "HEAD" ]; then
            CHANGELOG_CONTENT=$(git log --pretty=format:"- %s (%h)" --grep="^feat" --grep="^fix" --grep="BREAKING CHANGE" --perl-regexp | head -20)
          else
            CHANGELOG_CONTENT=$(git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^feat" --grep="^fix" --grep="BREAKING CHANGE" --perl-regexp | head -20)
          fi
          
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="- Initial release"
          fi
          
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update package version and create tag
        if: steps.version.outputs.has_changes == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Create and push tag
          git add package.json package-lock.json
          git commit -m "chore(release): v$NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin upstream/main:main
          git push origin "v$NEW_VERSION"

      - name: Build package
        if: steps.version.outputs.has_changes == 'true'
        run: npm run build

      - name: Check if version exists on npm
        if: steps.version.outputs.has_changes == 'true'
        id: check_version
        run: |
          if npm view remark-flow@${{ steps.version.outputs.new_version }} version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.new_version }} already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.new_version }} does not exist on npm"
          fi

      - name: Publish to npm
        if: steps.version.outputs.has_changes == 'true' && steps.check_version.outputs.exists == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## üì¶ Package Information
            - **Package**: [remark-flow](https://www.npmjs.com/package/remark-flow)
            - **Version**: ${{ steps.version.outputs.new_version }}
            - **Installation**: `npm install remark-flow@${{ steps.version.outputs.new_version }}`

            ## üìù What's Changed
            ${{ steps.version.outputs.changelog_content }}

            ## üîó Links
            - [NPM Package](https://www.npmjs.com/package/remark-flow/v/${{ steps.version.outputs.new_version }})
            - [Documentation](https://github.com/${{ github.repository }}#readme)
            - [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
